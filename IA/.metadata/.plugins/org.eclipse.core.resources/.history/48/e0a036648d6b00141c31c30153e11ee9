import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.lang.reflect.Array;
import java.util.ArrayList;

public class Main {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub




		int k=2;

		BufferedReader IN = null;

		try {
			IN = new BufferedReader(new FileReader("example6.col"));

		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		String ligne = null;
		String[] champs = null;
		int nbSommets=0;
		int nbArc=0;

		int[] sommets = {0,0};

		ArrayList<int[]> tabArc = new ArrayList<int[]>();

		// on a ou pas la ligne qui commence par p
		boolean ligneGraphe = false;
		try {

			while ((ligne = IN.readLine()) != null && (!ligneGraphe)) {
				champs = ligne.split(" ");

				if ((champs.length == 4) && (champs[0].compareTo("p") == 0 && champs[1].compareTo("edge") == 0)) {
					//System.out.println(ligne);

					nbSommets = Integer.parseInt(champs[2]);
					nbArc = Integer.parseInt(champs[3]);
					ligneGraphe = true;
					break;

				} 
				else {
					System.out.println("pas de fichier graphe");
				}

			}



			System.out.println(ligneGraphe);
			
			
			//si la ligne est présente on continue
			if (ligneGraphe) {
				while ((ligne = IN.readLine()) != null) {
					champs = ligne.split(" ");
					// System.out.println(champs[0]);

					if ((champs.length == 3) && (champs[0].compareTo("e") == 0)) {
						sommets[0] = Integer.parseInt(champs[1]);
						sommets[1] = Integer.parseInt(champs[2]);
						//on rajoute les deux sommets à la liste des arcs
						tabArc.add(sommets.clone());


					} 
					else {
//						System.out.println("ligne bizarre:");
//						System.out.println(ligne);
					}

				}

			}

			
			for(int i=0;i<tabArc.size();i++){

//				System.out.println("arc " + tabArc.get(i)[0] + " " + tabArc.get(i)[1]);


			}




		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}


		//on a k couleurs pour chaque sommets donc k*nbSommets variables
		int nbVariable=k*nbSommets;

		
		//on a ((k*(k-1))/2) + 1 contraintes sur les couleurs pour chaque sommets donc
		
		// nbSommets * ( (k*(k-1))/2) + 1 ) contraintes pour les couleurs
		//on a k contraintes pour chaque arc donc
		// k*nbArc contraintes pour les arcs
		int nbClauses=( nbSommets * ( ((k*(k-1))/2) + 1 ) ) + (k*nbArc);




		try {
			PrintWriter fic = new PrintWriter(new FileWriter("superFichier"));
			fic.println("p cnf " + nbVariable + " " +  nbClauses);

			/*liste avec toutes les variables tries*/
			ArrayList<Integer> var= new ArrayList<Integer>();


			//			for(int i =0;i<nbVariable;i++){
			//
			//				System.out.println(var[i]);
			//
			//			}
			//			


			ArrayList<ArrayList<Integer>> listevar= new ArrayList<ArrayList<Integer>>();
			
			//pour chaque sommet var contient les couleurs relative au sommet j
			for(int j=0;j<nbSommets;j++){
				var.clear();
				for(int i=0;i<k;i++){
					var.add(i+k*j+1);
				}



				//								System.out.println("sommet num " + (j+1));
				//								for(int i=0;i<k;i++){
				//									System.out.println("variable " + var[i]);
				//										
				//							}
				listevar=contrainteCouleurs(var);


				for(int i=0;i<k;i++){

					//					for(int l=0;l<k;l++){
					//
					//						System.out.println("contrainte numero "+i);
					//						System.out.println(listevar[i][l] + " ");
					//					}


					System.out.println("aha");
					System.out.println(intlist2String(listevar[i],k));
					fic.println(intlist2String(listevar[i],k) + "0");
				}



			}

			//			for(int i = 0; i< nbArc; i++){
			//				System.out.println("arcs "+ i);
			//				System.out.println(tabArc.get(i)[0]);
			//				System.out.println(tabArc.get(i)[1]);
			//				       
			//				       
			//			}
			//			
			int[] listeallvariable = new int[nbVariable];

			for(int i=0 ;i< nbVariable ;i++){

				listeallvariable[i] = -(i+1);
			}



			for(int numArc = 0; numArc< nbArc; numArc++){

				int sommet1 = tabArc.get(numArc)[0];
				int sommet2 = tabArc.get(numArc)[1];


				for(int i=0;i<k;i++){

					fic.print(listeallvariable[((sommet1-1)*k)+i] + " ");
					fic.print(listeallvariable[((sommet2-1)*k)+i] +" 0\n");




				}


			}










			fic.close();


		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
















	}

	public static ArrayList<ArrayList<Integer>> contrainteCouleurs(ArrayList<Integer> coulSommets){
		ArrayList<ArrayList<Integer>> contraintes = new ArrayList<ArrayList<Integer>>();
		
		ArrayList<Integer> contrainteActuel = new ArrayList<Integer>();
		
		contraintes.addAll(coulSommets);
		
		
		contraintes[0]=coulSommets.clone();
		
		int[] contrainteActuel = coulSommets.clone();
		
		for(int i=0;i<k;i++){
			
			for(int j = i+1;j<k;j++){
				contraintes[]
				
			}
			
			contrainteActuel[i] = -contrainteActuel[i];
			contraintes[i] = contrainteActuel;

		}





		return contraintes;

	}


	public static String intlist2String(int[] listInt,int longueur){

		String s = "";
		for(int i=0;i<longueur;i++){
			s=s.concat(String.valueOf(listInt[i]) + " ");
		}

		return s;
	}

}



