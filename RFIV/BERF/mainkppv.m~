%on a 10 classes de sonclasses = {'aa','ee','eh','eu','ii','oe','oh','oo','uu','yy'};%liste des moyennes des classeslisteMean={};%liste des matrices de variances/covariance des classeslisteCov={};%-------------APPRENTISSAGE-----------------------%%les donnees d'apprentissage se présentent sous la forme d'un tableau%à deux colonnes.  %Une colonne pour le vecteur et une colonne pour sa classe d'appartenancedonneesApp={};%pour chaque classe c, on recupere le vecteur moyenne%et la matrice de covariance et on les stocke dans listeMean et listeCov%lineApp est une variable servant à rajouter une donnée dans donneesApplineApp =  0;for c=1:10        for numero=1:80        %on recupere les donnees d'apprentissage (vecteur colone)        %a partir du repertoire Signal        v=['Signal/' classes{c} num2str(numero-1,'%.2d') '.wav'];        s=wavread(v);                %on effectue une transformée de Fourrier sur 32 fenetres        %on obtient un vecteur colonne de dimension 32        s=parametrisation_fft32(s);                %on transpose le vecteur et on l'ajoute aux données d'apprentissage, avec sa classe				%donneesApp{(c-1)*80+numero,1}=s';		%donneesApp{(c-1)*80+numero,2}=c;        lineApp = lineApp +1;        donneesApp{lineApp,1}=s';		donneesApp{lineApp,2}=c;           end       end%-------------RECONNAISSANCE-----------------------%%matrice des scoresmatScores=cell(10,10);%on initialise for i=1:10    for j=1:10        matScores{i,j}=0;    endend%pour chaque classefor c=1:10            for numero=81:100        %on recupere les 20 fichiers de test        %a partir du repertoire Signal        v = [ 'Signal/' classes{c} num2str(numero-1,'%.2d') '.wav'];        vect=wavread(v);        %parametrisation du vecteur        vect=parametrisation_fft32(vect);        k=2;                [classe]=reconnaitKppv(vect',donneesApp,k);        		matScores{c,classe} = matScores{c,classe}+1;            end    end