%on a 10 classes de sonclasses = {'aa','ee','eh','eu','ii','oe','oh','oo','uu','yy'};%liste des moyennes des classeslisteMean={};%liste des matrices de variances/covariance des classes listeCov={};%-------------APPRENTISSAGE-----------------------%%pour chaque classe c, on recupere le vecteur moyenne%et la matrice de covariancefor c=1:10%donnees d'apprentissagedonneesApp=[];for numero=1:80	%on recupere les donnees d'apprentissage (vecteur colone)    %a partir du repertoire Signal	v=['Signal/' classes{c} num2str(numero-1,'%.2d') '.wav'];	s=wavread(v);    %on effectue une transformée de Fourrier sur 32 fenetres    %on obtient un vecteur colonne de dimension 32	s=parametrisation_fft32(s);		%on transpose le vecteur et on l'ajoute aux données d'apprentissage	donneesApp=[donneesApp;s'];end%calcul de la moyenne et matrice covariance de la classe c[mi,ci]=apprend(donneesApp);%on fabrique la liste des moyenneslisteMean{c}=mi;%on fabrique la liste des matrices de covarianceslisteCov{c}=ci;end%-------------RECONNAISSANCE-----------------------%%matrice des scoresmatScores=cell(10,10);for i=1:10for j=1:10matScores{i,j}=0;endend%pour chaque classefor c=1:10  %on recupere les 20 fichiers de test  for numero=81:100        vect = [ 'Signal/' classes{c} num2str(numero-1,'%.2d') '.wav'];	vect=wavread(v);	vect=parametrisation_fft32(vect);	vect=vect';			%on calcul le score pour chaque classe		X=[];	for c2=1:10				X=[X,score(listeMean{c2},listeCov{c2},vect)];	end		X	%on prend le argmax	 [valmax,Iargmax] = max(X)		 k=Iargmax	 matScores{c,k} = matScores{c,k}+1;	 	 		  endend